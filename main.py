import os
import asyncio
import aiosqlite
from aiogram import Bot, Dispatcher, types
from aiogram.types import InlineKeyboardButton, InlineKeyboardMarkup
from aiogram.utils import executor
from aiogram.dispatcher import FSMContext
from aiogram.dispatcher.filters.state import State, StatesGroup
from aiogram.contrib.fsm_storage.memory import MemoryStorage
from dotenv import load_dotenv

load_dotenv()

BOT_TOKEN = os.getenv("BOT_TOKEN")
ADMIN_PASSWORD = os.getenv("ADMIN_PASSWORD")
MANAGER_USERNAME = os.getenv("MANAGER_USERNAME")

bot = Bot(token=BOT_TOKEN)
storage = MemoryStorage()
dp = Dispatcher(bot, storage=storage)

DB_PATH = "bot.db"

class AddProductState(StatesGroup):
    name = State()
    description = State()
    category = State()
    price = State()
    photos = State()

async def init_db():
    async with aiosqlite.connect(DB_PATH) as db:
        await db.execute(
            "CREATE TABLE IF NOT EXISTS products (id INTEGER PRIMARY KEY AUTOINCREMENT, name TEXT, description TEXT, price INTEGER, photos TEXT, category TEXT)"
        )
        await db.execute(
            "CREATE TABLE IF NOT EXISTS users (id INTEGER PRIMARY KEY, username TEXT, first_name TEXT, last_action TEXT)"
        )
        await db.commit()

@dp.message_handler(commands=["start"])
async def start_handler(message: types.Message):
    await save_user(message.from_user)
    async with aiosqlite.connect(DB_PATH) as db:
        async with db.execute("SELECT * FROM products") as cursor:
            products = await cursor.fetchall()
            if not products:
                await message.answer("–¢–æ–≤–∞—Ä—ã –≤—Ä–µ–º–µ–Ω–Ω–æ –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç.")
                return
            for p in products:
                name, desc, price, photos, *_ = p[1:]
                photo_list = photos.split(",")
                for i, photo_url in enumerate(photo_list):
                    caption = f"<b>{name}</b>\n{desc}\n–¶–µ–Ω–∞: {price}‚ÇΩ" if i == 0 else ""
                    btn = InlineKeyboardMarkup().add(
                        InlineKeyboardButton("–ö—É–ø–∏—Ç—å", url=f"https://t.me/{MANAGER_USERNAME}")
                    )
                    await bot.send_photo(message.chat.id, photo_url, caption=caption, parse_mode="HTML", reply_markup=btn)

async def save_user(user):
    async with aiosqlite.connect(DB_PATH) as db:
        await db.execute(
            "INSERT OR IGNORE INTO users (id, username, first_name, last_action) VALUES (?, ?, ?, ?)",
            (user.id, user.username, user.first_name, "start")
        )
        await db.commit()

@dp.message_handler(commands=["admin"])
async def admin_prompt(message: types.Message):
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –ø–∞—Ä–æ–ª—å:")

@dp.message_handler(lambda m: m.text == ADMIN_PASSWORD)
async def admin_panel(message: types.Message):
    kb = InlineKeyboardMarkup(row_width=2)
    kb.add(
        InlineKeyboardButton("‚ûï –î–æ–±–∞–≤–∏—Ç—å —Ç–æ–≤–∞—Ä", callback_data="add_product"),
        InlineKeyboardButton("üì¶ –í—Å–µ —Ç–æ–≤–∞—Ä—ã", callback_data="list_products"),
        InlineKeyboardButton("üì§ –†–∞—Å—Å—ã–ª–∫–∞", callback_data="broadcast")
    )
    await message.answer("–ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å:", reply_markup=kb)

@dp.callback_query_handler(lambda c: c.data == "add_product")
async def start_add_product(callback: types.CallbackQuery, state: FSMContext):
    await callback.message.answer("–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞:")
    await AddProductState.name.set()
    await state.update_data(photos=[])

@dp.message_handler(state=AddProductState.name)
async def product_name(message: types.Message, state: FSMContext):
    await state.update_data(name=message.text)
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞:")
    await AddProductState.description.set()

@dp.message_handler(state=AddProductState.description)
async def product_description(message: types.Message, state: FSMContext):
    await state.update_data(description=message.text)
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é —Ç–æ–≤–∞—Ä–∞:")
    await AddProductState.category.set()

@dp.message_handler(state=AddProductState.category)
async def product_category(message: types.Message, state: FSMContext):
    # –û–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è
    await state.update_data(category=message.text)
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–ª–µ–¥—É—é—â–∏–π –≤–æ–ø—Ä–æ—Å
    await message.answer("–í–≤–µ–¥–∏—Ç–µ —Ü–µ–Ω—É —Ç–æ–≤–∞—Ä–∞ (—Ç–æ–ª—å–∫–æ —á–∏—Å–ª–æ):")
    # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–µ price
    await AddProductState.price.set()

@dp.message_handler(state=AddProductState.price)
async def product_price(message: types.Message, state: FSMContext):
    await state.update_data(price=message.text)
    await message.answer("–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ —Ç–æ–≤–∞—Ä–∞ (–ø–æ –æ–¥–Ω–æ–º—É). –ö–æ–≥–¥–∞ –∑–∞–∫–æ–Ω—á–∏—Ç–µ ‚Äî –Ω–∞–ø–∏—à–∏—Ç–µ '–ì–æ—Ç–æ–≤–æ'")
    await AddProductState.photos.set()

@dp.message_handler(content_types=types.ContentType.PHOTO, state=AddProductState.photos)
async def product_photo(message: types.Message, state: FSMContext):
    file_id = message.photo[-1].file_id
    data = await state.get_data()
    photo_list = data.get("photos", [])
    photo_list.append(f"https://api.telegram.org/file/bot{BOT_TOKEN}/{file_id}")
    await state.update_data(photos=photo_list)
    await message.answer("–§–æ—Ç–æ –¥–æ–±–∞–≤–ª–µ–Ω–æ. –û—Ç–ø—Ä–∞–≤—å—Ç–µ –µ—â—ë –∏–ª–∏ –Ω–∞–ø–∏—à–∏—Ç–µ '–ì–æ—Ç–æ–≤–æ'.")

@dp.message_handler(lambda m: m.text.lower() == "–≥–æ—Ç–æ–≤–æ", state=AddProductState.photos)
async def finish_product(message: types.Message, state: FSMContext):
    data = await state.get_data()
    photos = ",".join(data["photos"])
    async with aiosqlite.connect(DB_PATH) as db:
        await db.execute(
            "INSERT INTO products (name, description, price, photos, category) VALUES (?, ?, ?, ?, ?)",
            (data["name"], data["description"], int(data["price"]), photos, data["category"])
        )
        await db.commit()
    await message.answer("–¢–æ–≤–∞—Ä —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω!")
    await state.finish()

@dp.callback_query_handler(lambda c: c.data == "broadcast")
async def handle_broadcast(callback: types.CallbackQuery):
    await callback.message.answer("–í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç —Ä–∞—Å—Å—ã–ª–∫–∏:")
    dp.register_message_handler(process_broadcast, content_types=types.ContentTypes.TEXT, state="*")

async def process_broadcast(message: types.Message):
    async with aiosqlite.connect(DB_PATH) as db:
        async with db.execute("SELECT id FROM users") as cursor:
            users = await cursor.fetchall()
            for (uid,) in users:
                try:
                    await bot.send_message(uid, message.text)
                except:
                    pass
    await message.answer("–†–∞—Å—Å—ã–ª–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞.")
    dp.message_handlers.unregister(process_broadcast)

if name == "__main__":
    asyncio.run(init_db())
    executor.start_polling(dp, skip_updates=True)
